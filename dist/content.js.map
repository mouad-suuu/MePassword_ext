{"version":3,"file":"content.js","mappings":"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","sources":["webpack://mepassword_ext/./src/content/content.tsx"],"sourcesContent":["// Constants for form detection\nconst FORM_SELECTORS = {\n    PASSWORD_INPUTS: [\n        'input[type=\"password\"]',\n        'input[name*=\"pass\" i]',\n        'input[id*=\"pass\" i]',\n        'input[class*=\"pass\" i]',\n        'input[aria-label*=\"password\" i]',\n    ],\n    USERNAME_INPUTS: [\n        'input[type=\"text\"]',\n        'input[type=\"email\"]',\n        'input[name*=\"user\" i]',\n        'input[name*=\"email\" i]',\n        'input[id*=\"user\" i]',\n        'input[id*=\"email\" i]',\n        'input[class*=\"user\" i]',\n        'input[class*=\"email\" i]',\n        'input[aria-label*=\"username\" i]',\n        'input[aria-label*=\"email\" i]',\n    ],\n    SUBMIT_BUTTONS: [\n        'button[type=\"submit\"]',\n        'input[type=\"submit\"]',\n        'button[name*=\"login\" i]',\n        'button[id*=\"login\" i]',\n        'button[class*=\"login\" i]',\n        'a[href*=\"login\" i]',\n    ],\n};\nclass CredentialDetector {\n    constructor() {\n        this.observedForms = new Set();\n        this.lastDetectedCredentials = null;\n        this.typingTimer = null;\n        this.TYPING_TIMEOUT = 5000; // 5 seconds\n        this.isAutoFilling = false;\n        // Initialize mutation observer to detect dynamically added forms\n        this.mutationObserver = new MutationObserver(this.handleDOMChanges.bind(this));\n        this.setupMutationObserver();\n        this.createFloatingButton();\n    }\n    // Sets up the mutation observer to watch for changes in the DOM\n    setupMutationObserver() {\n        this.mutationObserver.observe(document.documentElement, {\n            childList: true,\n            subtree: true,\n        });\n    }\n    // Finds the username field in the form relative to the password field\n    findUsernameField(form, passwordField) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        // First try to find username/email input before the password field\n        const allInputs = Array.from(form.getElementsByTagName(\"input\"));\n        const passwordIndex = allInputs.indexOf(passwordField);\n        // Look for inputs before the password field first\n        const previousInputs = allInputs.slice(0, passwordIndex);\n        for (const input of previousInputs.reverse()) {\n            if (input.type === \"text\" ||\n                input.type === \"email\" ||\n                ((_a = input.name) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes(\"user\")) ||\n                ((_b = input.name) === null || _b === void 0 ? void 0 : _b.toLowerCase().includes(\"email\")) ||\n                ((_c = input.id) === null || _c === void 0 ? void 0 : _c.toLowerCase().includes(\"user\")) ||\n                ((_d = input.id) === null || _d === void 0 ? void 0 : _d.toLowerCase().includes(\"email\"))) {\n                return input;\n            }\n        }\n        // If no username field found before password, check after\n        const nextInputs = allInputs.slice(passwordIndex + 1);\n        for (const input of nextInputs) {\n            if (input.type === \"text\" ||\n                input.type === \"email\" ||\n                ((_e = input.name) === null || _e === void 0 ? void 0 : _e.toLowerCase().includes(\"user\")) ||\n                ((_f = input.name) === null || _f === void 0 ? void 0 : _f.toLowerCase().includes(\"email\")) ||\n                ((_g = input.id) === null || _g === void 0 ? void 0 : _g.toLowerCase().includes(\"user\")) ||\n                ((_h = input.id) === null || _h === void 0 ? void 0 : _h.toLowerCase().includes(\"email\"))) {\n                return input;\n            }\n        }\n        // Fallback to the original selector method\n        return (form.querySelector(FORM_SELECTORS.USERNAME_INPUTS.join(\",\")) || undefined);\n    }\n    // Extracts credentials from the form elements\n    extractCredentials(formElements) {\n        var _a, _b;\n        const credentials = {\n            website: window.location.origin,\n            user: ((_a = formElements.usernameField) === null || _a === void 0 ? void 0 : _a.value) || \"\",\n            password: ((_b = formElements.passwordField) === null || _b === void 0 ? void 0 : _b.value) || \"\",\n            formData: {\n                url: window.location.href,\n                title: document.title,\n                timestamp: new Date().toISOString(),\n            },\n        };\n        return credentials;\n    }\n    // Notifies about detected credentials and sends a message to the background script\n    async notifyCredentialDetection(credentials) {\n        if (this.isDuplicateCredential(credentials)) {\n            return;\n        }\n        this.lastDetectedCredentials = Object.assign(Object.assign({}, credentials), { timestamp: Date.now() });\n        try {\n            if (chrome.runtime && chrome.runtime.id) {\n                await chrome.runtime.sendMessage({\n                    type: \"PASSWORD_DETECTED\",\n                    data: credentials,\n                });\n            }\n            else {\n                throw new Error(\"Extension needs to be reloaded to function properly\");\n            }\n        }\n        catch (error) {\n            if (error === \"Extension context invalidated.\") {\n                throw new Error(\"Please refresh the page to continue using MePassword\");\n            }\n            else {\n                throw new Error(\"Unable to save credentials. Please try again later\");\n            }\n        }\n    }\n    // Handles changes in the DOM and processes new elements\n    async handleDOMChanges(mutations) {\n        for (const mutation of mutations) {\n            if (mutation.addedNodes.length > 0) {\n                const addedNodes = Array.from(mutation.addedNodes);\n                for (const node of addedNodes) {\n                    if (node instanceof HTMLElement) {\n                        await this.processNewElement(node);\n                    }\n                }\n            }\n        }\n    }\n    // Processes a new element added to the DOM\n    async processNewElement(element) {\n        const forms = element.tagName === \"FORM\"\n            ? [element]\n            : Array.from(element.getElementsByTagName(\"form\"));\n        for (const form of forms) {\n            await this.attachFormListeners(form);\n        }\n        const passwordFields = Array.from(element.querySelectorAll(FORM_SELECTORS.PASSWORD_INPUTS.join(\",\")));\n        for (const field of passwordFields) {\n            if (!field.form) {\n                this.createVirtualForm(field);\n            }\n        }\n    }\n    // Creates a virtual form for a password field if it doesn't belong to a form\n    createVirtualForm(passwordField) {\n        var _a;\n        const virtualForm = document.createElement(\"form\");\n        virtualForm.setAttribute(\"data-virtual-form\", \"true\");\n        (_a = passwordField.parentElement) === null || _a === void 0 ? void 0 : _a.insertBefore(virtualForm, passwordField);\n        virtualForm.appendChild(passwordField.cloneNode(true));\n        passwordField.remove();\n        this.attachFormListeners(virtualForm);\n    }\n    // Finds form elements including password and username fields\n    findFormElements(form) {\n        const passwordField = form.querySelector(FORM_SELECTORS.PASSWORD_INPUTS.join(\",\"));\n        if (!passwordField) {\n            throw new Error(\"No password field found in form\");\n        }\n        const usernameField = this.findUsernameField(form, passwordField);\n        const submitButton = form.querySelector(FORM_SELECTORS.SUBMIT_BUTTONS.join(\",\"));\n        return {\n            form,\n            usernameField,\n            passwordField,\n            submitButton: submitButton,\n        };\n    }\n    // Calculates the distance between an element and the password field\n    getDistanceToPassword(element, passwordField) {\n        const rect1 = element.getBoundingClientRect();\n        const rect2 = passwordField.getBoundingClientRect();\n        return Math.abs(rect1.top - rect2.top);\n    }\n    // Attaches event listeners to the form for submission and input changes\n    attachFormListeners(form) {\n        if (this.observedForms.has(form)) {\n            return;\n        }\n        try {\n            const formElements = this.findFormElements(form);\n            this.observedForms.add(form);\n            // Handle input changes with timer\n            const handleInput = () => {\n                // Clear any existing timer\n                if (this.typingTimer) {\n                    clearTimeout(this.typingTimer);\n                }\n                // Show/hide save button based on password content\n                if (formElements.passwordField.value) {\n                    this.floatingButton.style.display = 'block';\n                }\n                else {\n                    this.floatingButton.style.display = 'none';\n                }\n                // Set new timer\n                this.typingTimer = setTimeout(() => {\n                    // Only proceed if we have a password\n                    if (formElements.passwordField.value) {\n                        const credentials = this.extractCredentials(formElements);\n                        if (credentials) {\n                            this.notifyCredentialDetection(credentials);\n                        }\n                    }\n                }, this.TYPING_TIMEOUT);\n            };\n            // Add input listeners to both password and username fields\n            formElements.passwordField.addEventListener(\"input\", handleInput);\n            if (formElements.usernameField) {\n                formElements.usernameField.addEventListener(\"input\", handleInput);\n            }\n            // Keep the submit handler\n            form.addEventListener(\"submit\", (e) => {\n                if (this.typingTimer) {\n                    clearTimeout(this.typingTimer);\n                }\n                this.handleFormSubmission(e, formElements);\n            });\n        }\n        catch (error) {\n            // Handle error\n        }\n    }\n    // Handles form submission and extracts credentials\n    async handleFormSubmission(event, formElements) {\n        const credentials = this.extractCredentials(formElements);\n        if (credentials === null || credentials === void 0 ? void 0 : credentials.password) {\n            try {\n                await this.notifyCredentialDetection(credentials);\n            }\n            catch (error) {\n                // Error message will be handled by notifyCredentialDetection\n            }\n        }\n    }\n    // Handles input changes in the password field and notifies credential detection\n    async handleInputChange(formElements) {\n        if (this.isAutoFilling) {\n            return;\n        }\n        const credentials = this.extractCredentials(formElements);\n        if (credentials === null || credentials === void 0 ? void 0 : credentials.password) {\n            try {\n                await this.notifyCredentialDetection(credentials);\n            }\n            catch (error) {\n                // Error message will be handled by notifyCredentialDetection\n            }\n        }\n    }\n    // Creates a floating button for manual credential detection\n    createFloatingButton() {\n        this.floatingButton = document.createElement('button');\n        this.floatingButton.innerHTML = 'Save Password';\n        this.floatingButton.style.cssText = `\n      position: fixed;\n      right: 20px;\n      bottom: 20px;\n      z-index: 10000;\n      padding: 10px 20px;\n      font-size: 14px;\n      border-radius: 8px;\n      border: none;\n      background: #007bff;\n      color: white;\n      cursor: pointer;\n      box-shadow: 0 2px 5px rgba(0,0,0,0.2);\n      transition: all 0.3s ease;\n      display: none;\n    `;\n        this.floatingButton.addEventListener('mouseover', () => {\n            this.floatingButton.style.transform = 'scale(1.05)';\n            this.floatingButton.style.background = '#0056b3';\n        });\n        this.floatingButton.addEventListener('mouseout', () => {\n            this.floatingButton.style.transform = 'scale(1)';\n            this.floatingButton.style.background = '#007bff';\n        });\n        this.floatingButton.addEventListener('click', () => {\n            if (this.typingTimer) {\n                clearTimeout(this.typingTimer);\n            }\n            this.detectAndSaveCredentials();\n        });\n        document.body.appendChild(this.floatingButton);\n    }\n    // Detects and saves credentials manually\n    detectAndSaveCredentials() {\n        const forms = document.querySelectorAll(\"form\");\n        forms.forEach((form) => {\n            try {\n                const formElements = this.findFormElements(form);\n                const credentials = this.extractCredentials(formElements);\n                if ((credentials === null || credentials === void 0 ? void 0 : credentials.website) && (credentials === null || credentials === void 0 ? void 0 : credentials.password)) {\n                    chrome.runtime.sendMessage({\n                        type: \"PASSWORD_DETECTED\",\n                        data: credentials,\n                    });\n                    // Hide button after saving\n                    this.floatingButton.style.display = 'none';\n                }\n            }\n            catch (error) {\n                // Handle error\n            }\n        });\n    }\n    initialize() {\n        document.querySelectorAll(\"form\").forEach((form) => {\n            this.attachFormListeners(form);\n        });\n        document\n            .querySelectorAll(FORM_SELECTORS.PASSWORD_INPUTS.join(\",\"))\n            .forEach((field) => {\n            if (!field.closest(\"form\")) {\n                this.createVirtualForm(field);\n            }\n        });\n    }\n    setAutoFilling(value) {\n        this.isAutoFilling = value;\n    }\n    getAutoFilling() {\n        return this.isAutoFilling;\n    }\n    isDuplicateCredential(newCredentials) {\n        if (!this.lastDetectedCredentials)\n            return false;\n        const timeDiff = Date.now() - this.lastDetectedCredentials.timestamp;\n        return (timeDiff < this.TYPING_TIMEOUT &&\n            this.lastDetectedCredentials.website === newCredentials.website &&\n            this.lastDetectedCredentials.user === newCredentials.user &&\n            this.lastDetectedCredentials.password === newCredentials.password);\n    }\n}\n// Initialize the detector\nconst detector = new CredentialDetector();\ndetector.initialize();\n// Re-initialize on URL changes\nlet lastUrl = location.href;\nnew MutationObserver(() => {\n    if (location.href !== lastUrl) {\n        lastUrl = location.href;\n        detector.initialize();\n    }\n}).observe(document, { subtree: true, childList: true });\n// Add this to your content script, before the detector initialization\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.type === \"AUTO_FILL_CREDENTIALS\") {\n        const { user, password } = message.data;\n        // Set the auto-filling flag\n        detector.setAutoFilling(true);\n        // Find password fields using existing selectors\n        const passwordFields = document.querySelectorAll(FORM_SELECTORS.PASSWORD_INPUTS.join(\",\"));\n        // Find username fields using existing selectors\n        const usernameFields = document.querySelectorAll(FORM_SELECTORS.USERNAME_INPUTS.join(\",\"));\n        // Auto-fill the first matching fields found\n        if (passwordFields.length > 0) {\n            passwordFields[0].value = password;\n            // Trigger input event to notify any listeners\n            passwordFields[0].dispatchEvent(new Event(\"input\", { bubbles: true }));\n        }\n        if (usernameFields.length > 0 && user) {\n            usernameFields[0].value = user;\n            // Trigger input event to notify any listeners\n            usernameFields[0].dispatchEvent(new Event(\"input\", { bubbles: true }));\n        }\n        // Reset the auto-filling flag after a short delay\n        setTimeout(() => {\n            detector.setAutoFilling(false);\n        }, 1000);\n        sendResponse({ success: true });\n    }\n});\nexport {};\n"],"names":["FORM_SELECTORS","PASSWORD_INPUTS","USERNAME_INPUTS","SUBMIT_BUTTONS","detector","constructor","this","observedForms","Set","lastDetectedCredentials","typingTimer","TYPING_TIMEOUT","isAutoFilling","mutationObserver","MutationObserver","handleDOMChanges","bind","setupMutationObserver","createFloatingButton","observe","document","documentElement","childList","subtree","findUsernameField","form","passwordField","_a","_b","_c","_d","_e","_f","_g","_h","allInputs","Array","from","getElementsByTagName","passwordIndex","indexOf","previousInputs","slice","input","reverse","type","name","toLowerCase","includes","id","nextInputs","querySelector","join","undefined","extractCredentials","formElements","website","window","location","origin","user","usernameField","value","password","formData","url","href","title","timestamp","Date","toISOString","notifyCredentialDetection","credentials","isDuplicateCredential","Object","assign","now","chrome","runtime","Error","sendMessage","data","error","mutations","mutation","addedNodes","length","node","HTMLElement","processNewElement","element","forms","tagName","attachFormListeners","passwordFields","querySelectorAll","field","createVirtualForm","virtualForm","createElement","setAttribute","parentElement","insertBefore","appendChild","cloneNode","remove","findFormElements","submitButton","getDistanceToPassword","rect1","getBoundingClientRect","rect2","Math","abs","top","has","add","handleInput","clearTimeout","floatingButton","style","display","setTimeout","addEventListener","e","handleFormSubmission","event","handleInputChange","innerHTML","cssText","transform","background","detectAndSaveCredentials","body","forEach","initialize","closest","setAutoFilling","getAutoFilling","newCredentials","lastUrl","onMessage","addListener","message","sender","sendResponse","usernameFields","dispatchEvent","Event","bubbles","success"],"sourceRoot":""}