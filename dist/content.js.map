{"version":3,"file":"content.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,+BAA+B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,sFAAsF,kBAAkB,iBAAiB;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjaAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sBAAsB,gCAAgC;AAC7C","sources":["webpack://mepassword_ext/webpack/bootstrap","webpack://mepassword_ext/webpack/runtime/make namespace object","webpack://mepassword_ext/./src/content/content.tsx"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Constants for form detection\nconst FORM_SELECTORS = {\n    PASSWORD_INPUTS: [\n        'input[type=\"password\"]',\n        'input[name*=\"pass\" i]',\n        'input[id*=\"pass\" i]',\n        'input[class*=\"pass\" i]',\n        'input[aria-label*=\"password\" i]',\n    ],\n    USERNAME_INPUTS: [\n        'input[type=\"text\"]',\n        'input[type=\"email\"]',\n        'input[name*=\"user\" i]',\n        'input[name*=\"email\" i]',\n        'input[id*=\"user\" i]',\n        'input[id*=\"email\" i]',\n        'input[class*=\"user\" i]',\n        'input[class*=\"email\" i]',\n        'input[aria-label*=\"username\" i]',\n        'input[aria-label*=\"email\" i]',\n    ],\n    SUBMIT_BUTTONS: [\n        'button[type=\"submit\"]',\n        'input[type=\"submit\"]',\n        'button[name*=\"login\" i]',\n        'button[id*=\"login\" i]',\n        'button[class*=\"login\" i]',\n        'a[href*=\"login\" i]',\n    ],\n};\nclass CredentialDetector {\n    constructor() {\n        this.observedForms = new Set();\n        this.lastDetectedCredentials = null;\n        this.detectionTimeout = null;\n        // Initialize mutation observer to detect dynamically added forms\n        this.mutationObserver = new MutationObserver(this.handleDOMChanges.bind(this));\n        this.setupMutationObserver();\n    }\n    // Sets up the mutation observer to watch for changes in the DOM\n    setupMutationObserver() {\n        this.mutationObserver.observe(document.documentElement, {\n            childList: true,\n            subtree: true,\n        });\n    }\n    // Finds the username field in the form relative to the password field\n    findUsernameField(form, passwordField) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        // First try to find username/email input before the password field\n        const allInputs = Array.from(form.getElementsByTagName(\"input\"));\n        const passwordIndex = allInputs.indexOf(passwordField);\n        // Look for inputs before the password field first\n        const previousInputs = allInputs.slice(0, passwordIndex);\n        for (const input of previousInputs.reverse()) {\n            if (input.type === \"text\" ||\n                input.type === \"email\" ||\n                ((_a = input.name) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes(\"user\")) ||\n                ((_b = input.name) === null || _b === void 0 ? void 0 : _b.toLowerCase().includes(\"email\")) ||\n                ((_c = input.id) === null || _c === void 0 ? void 0 : _c.toLowerCase().includes(\"user\")) ||\n                ((_d = input.id) === null || _d === void 0 ? void 0 : _d.toLowerCase().includes(\"email\"))) {\n                return input;\n            }\n        }\n        // If no username field found before password, check after\n        const nextInputs = allInputs.slice(passwordIndex + 1);\n        for (const input of nextInputs) {\n            if (input.type === \"text\" ||\n                input.type === \"email\" ||\n                ((_e = input.name) === null || _e === void 0 ? void 0 : _e.toLowerCase().includes(\"user\")) ||\n                ((_f = input.name) === null || _f === void 0 ? void 0 : _f.toLowerCase().includes(\"email\")) ||\n                ((_g = input.id) === null || _g === void 0 ? void 0 : _g.toLowerCase().includes(\"user\")) ||\n                ((_h = input.id) === null || _h === void 0 ? void 0 : _h.toLowerCase().includes(\"email\"))) {\n                return input;\n            }\n        }\n        // Fallback to the original selector method\n        return (form.querySelector(FORM_SELECTORS.USERNAME_INPUTS.join(\",\")) || undefined);\n    }\n    // Extracts credentials from the form elements\n    extractCredentials(formElements) {\n        const { passwordField, usernameField } = formElements;\n        if (!passwordField.value) {\n            return null;\n        }\n        const credentials = {\n            website: window.location.origin,\n            user: usernameField === null || usernameField === void 0 ? void 0 : usernameField.value,\n            password: passwordField.value,\n            formData: {\n                url: window.location.href,\n                title: document.title,\n                timestamp: new Date().toISOString(),\n            },\n        };\n        console.log(\"CONTENT:  Extracted credentials:\", Object.assign(Object.assign({}, credentials), { password: \"***\" }));\n        return credentials;\n    }\n    // Notifies about detected credentials and sends a message to the background script\n    async notifyCredentialDetection(credentials) {\n        try {\n            console.log(\"CONTENT: Sending credential detection message to background\");\n            // Check if chrome.runtime is defined and available\n            if (chrome.runtime && chrome.runtime.id) {\n                await chrome.runtime.sendMessage({\n                    type: \"PASSWORD_DETECTED\",\n                    data: credentials,\n                });\n            }\n            else {\n                console.warn(\"CONTENT: Chrome runtime not available, extension may need to be reloaded\");\n            }\n        }\n        catch (error) {\n            // Handle specific error types\n            if (error === \"Extension context invalidated.\") {\n                console.warn(\"CONTENT: Extension context invalidated. Please refresh the page.\");\n            }\n            else {\n                console.error(\"CONTENT: Error sending credential detection message:\", error);\n            }\n            // Don't throw the error - we want to fail gracefully\n        }\n    }\n    // Handles changes in the DOM and processes new elements\n    async handleDOMChanges(mutations) {\n        console.log(\"CONTENT:  DOM changes detected:\", mutations);\n        for (const mutation of mutations) {\n            console.log(\"CONTENT:  Processing mutation:\", mutation);\n            if (mutation.type === \"childList\") {\n                const addedNodes = Array.from(mutation.addedNodes);\n                console.log(\"CONTENT:  Added nodes:\", addedNodes);\n                for (const node of addedNodes) {\n                    if (node instanceof HTMLElement) {\n                        console.log(\"CONTENT:  Processing new element:\", node);\n                        await this.processNewElement(node);\n                    }\n                }\n            }\n        }\n    }\n    // Processes a new element added to the DOM\n    async processNewElement(element) {\n        console.log(\"CONTENT:  Processing new element:\", element);\n        const forms = element.querySelectorAll(\"form\");\n        console.log(\"CONTENT:  Found forms:\", forms);\n        forms.forEach((form) => {\n            console.log(\"CONTENT:  Attaching listeners to form:\", form);\n            this.attachFormListeners(form);\n        });\n        const passwordFields = element.querySelectorAll(FORM_SELECTORS.PASSWORD_INPUTS.join(\",\"));\n        console.log(\"CONTENT:  Found password fields:\", passwordFields);\n        passwordFields.forEach((field) => {\n            const parentForm = field.closest(\"form\");\n            if (!parentForm) {\n                console.log(\"CONTENT:  Creating virtual form for password field:\", field);\n                this.createVirtualForm(field);\n            }\n        });\n    }\n    // Creates a virtual form for a password field if it doesn't belong to a form\n    createVirtualForm(passwordField) {\n        var _a;\n        console.log(\"CONTENT:  Creating virtual form for password field:\", passwordField);\n        const virtualForm = document.createElement(\"form\");\n        virtualForm.setAttribute(\"data-virtual-form\", \"true\");\n        (_a = passwordField.parentElement) === null || _a === void 0 ? void 0 : _a.insertBefore(virtualForm, passwordField);\n        virtualForm.appendChild(passwordField.cloneNode(true));\n        passwordField.remove();\n        this.attachFormListeners(virtualForm);\n    }\n    // Finds form elements including password and username fields\n    findFormElements(form) {\n        const passwordField = form.querySelector(FORM_SELECTORS.PASSWORD_INPUTS.join(\",\"));\n        if (!passwordField) {\n            throw new Error(\"No password field found in form\");\n        }\n        const usernameField = this.findUsernameField(form, passwordField);\n        const submitButton = form.querySelector(FORM_SELECTORS.SUBMIT_BUTTONS.join(\",\"));\n        return {\n            form,\n            usernameField,\n            passwordField,\n            submitButton: submitButton,\n        };\n    }\n    // Calculates the distance between an element and the password field\n    getDistanceToPassword(element, passwordField) {\n        const rect1 = element.getBoundingClientRect();\n        const rect2 = passwordField.getBoundingClientRect();\n        return Math.abs(rect1.top - rect2.top);\n    }\n    // Attaches event listeners to the form for submission and input changes\n    attachFormListeners(form) {\n        console.log(\"CONTENT:  Attaching form listeners for form:\", form);\n        if (this.observedForms.has(form)) {\n            console.log(\"CONTENT:  Form already observed:\", form);\n            return;\n        }\n        try {\n            const formElements = this.findFormElements(form);\n            console.log(\"CONTENT:  Form elements found:\", formElements);\n            this.observedForms.add(form);\n            form.addEventListener(\"submit\", (e) => {\n                console.log(\"CONTENT:  Form submitted:\", formElements);\n                this.handleFormSubmission(e, formElements);\n            });\n            formElements.passwordField.addEventListener(\"input\", this.debounce(() => {\n                console.log(\"CONTENT:  Input changed in password field:\", formElements);\n                this.handleInputChange(formElements);\n            }, 500));\n            formElements.passwordField.addEventListener(\"focus\", () => {\n                console.log(\"CONTENT:  Password field focused:\", formElements);\n                this.handlePasswordFocus(formElements);\n            });\n        }\n        catch (error) {\n            console.debug(\"Failed to attach listeners to form:\", error);\n        }\n    }\n    // Handles form submission and extracts credentials\n    async handleFormSubmission(event, formElements) {\n        console.log(\"CONTENT:  Handling form submission:\", formElements);\n        const credentials = this.extractCredentials(formElements);\n        if ((credentials === null || credentials === void 0 ? void 0 : credentials.website) && (credentials === null || credentials === void 0 ? void 0 : credentials.user) && (credentials === null || credentials === void 0 ? void 0 : credentials.password)) {\n            console.log(\"CONTENT:  Extracted credentials:\", credentials);\n            await this.notifyCredentialDetection(credentials);\n        }\n    }\n    // Handles input changes in the password field and notifies credential detection\n    async handleInputChange(formElements) {\n        console.log(\"CONTENT: Handling input change:\", formElements);\n        const credentials = this.extractCredentials(formElements);\n        if (credentials) {\n            console.log(\"CONTENT: Credentials extracted on input change:\", credentials);\n            if (this.detectionTimeout) {\n                clearTimeout(this.detectionTimeout);\n            }\n            this.detectionTimeout = setTimeout(async () => {\n                try {\n                    console.log(\"Notifying credential detection after input change:\", credentials);\n                    await this.notifyCredentialDetection(credentials);\n                }\n                catch (error) {\n                    console.warn(\"CONTENT: Failed to notify credential detection:\", error);\n                    // Continue execution - don't let this error break the form functionality\n                }\n            }, 1000);\n        }\n    }\n    // Handles focus event on the password field and notifies credential detection\n    async handlePasswordFocus(formElements) {\n        console.log(\"CONTENT:  Handling password focus:\", formElements);\n        const credentials = this.extractCredentials(formElements);\n        if (credentials) {\n            console.log(\"Notifying credential detection on password focus:\", credentials);\n            await this.notifyCredentialDetection(credentials);\n        }\n    }\n    debounce(func, wait) {\n        let timeout = null;\n        return (...args) => {\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n            timeout = setTimeout(() => func.apply(this, args), wait);\n        };\n    }\n    initialize() {\n        console.log(\"CONTENT:  Initializing CredentialDetector...\");\n        document.querySelectorAll(\"form\").forEach((form) => {\n            console.log(\"CONTENT:  Attaching listeners to existing form:\", form);\n            this.attachFormListeners(form);\n        });\n        document\n            .querySelectorAll(FORM_SELECTORS.PASSWORD_INPUTS.join(\",\"))\n            .forEach((field) => {\n            if (!field.closest(\"form\")) {\n                console.log(\"Creating virtual form for existing password field:\", field);\n                this.createVirtualForm(field);\n            }\n        });\n    }\n}\n// Initialize the detector\nconsole.log(\"CONTENT:  Initializing CredentialDetector instance...\");\n// Initialize the detector\nconst detector = new CredentialDetector();\ndetector.initialize();\n// Re-initialize on URL changes\nlet lastUrl = location.href;\nnew MutationObserver(() => {\n    if (location.href !== lastUrl) {\n        lastUrl = location.href;\n        detector.initialize();\n    }\n}).observe(document, { subtree: true, childList: true });\nexport {};\n"],"names":[],"sourceRoot":""}